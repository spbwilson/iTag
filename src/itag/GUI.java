package itag;

import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author s0831408 and s0789266
 */
public class GUI extends javax.swing.JFrame {

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        finishButton = new javax.swing.JButton();
        renameButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagListBox = new javax.swing.JList();
        colorComboBox = new javax.swing.JComboBox();
        tagListLabel = new javax.swing.JLabel();
        colorComboBoxLabel = new javax.swing.JLabel();
        logoLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iTag");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(254, 254, 254));
        mainPanel.setBorder(null);
        mainPanel.setMaximumSize(new java.awt.Dimension(640, 480));
        mainPanel.setMinimumSize(new java.awt.Dimension(640, 480));
        mainPanel.setPreferredSize(new java.awt.Dimension(640, 480));

        welcomeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iTag_welcome.png"))); // NOI18N
        welcomeLabel.setOpaque(true);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        finishButton.setText("Finish Tag");
        finishButton.setToolTipText("Complete tag");
        finishButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        renameButton.setText("Rename Tag");
        renameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Tag");
        deleteButton.setToolTipText("Delete the tag selected in the tag list");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo Point");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        tagListBox.setModel(listModel);
        tagListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tagListBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tagListBoxMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tagListBoxMouseEntered(evt);
            }
        });
        tagListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tagListBoxValueChanged(evt);
            }
        });
        tagListBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tagListBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tagListBoxFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(tagListBox);

        colorComboBox.setModel(colorComboBox.getModel());
        colorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorComboBoxActionPerformed(evt);
            }
        });

        tagListLabel.setText("Tag List");

        colorComboBoxLabel.setText("Tag Colour");

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iTag.png"))); // NOI18N

        fileMenu.setText("File");

        newMenuItem.setText("New");
        fileMenu.add(newMenuItem);

        openMenuItem.setText("Open..");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(colorComboBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(25, 25, 25))
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(logoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(finishButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(renameButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(undoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(colorComboBox, 0, 120, Short.MAX_VALUE))
                            .addContainerGap()))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(tagListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, 0, 481, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(finishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(undoButton)
                        .addGap(18, 18, 18)
                        .addComponent(colorComboBoxLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tagListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Panel imagePanel = null;

    File imageFile = null;
    final JFileChooser fileChooser = new JFileChooser();
    int selectedIndex;
    public String focussedColor;
    
    DefaultListModel listModel = new DefaultListModel();        //Model for the JList named tagListBox  
    ArrayList<String> tagNameList = new ArrayList<String>();    //List within the JList named tagListBox
    ArrayList<Point> selectedTag = new ArrayList<Point>();      //Selected tag in tagListBox
    ArrayList<String> colorList = new ArrayList<String>();    //List of tag colors
    
    public final void fillColorList() {
        colorList.add("Green");
        colorList.add("Red");
        colorList.add("Blue");
        colorList.add("Yellow");
    }
    
    /** Creates new form GUI */
    public GUI() {
        initComponents();
        welcomeLabel.setVisible(true);       
        fillColorList();
        DefaultComboBoxModel colorListModel = new DefaultComboBoxModel(colorList.toArray());
        colorComboBox.setModel(colorListModel);
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        
        if (imagePanel != null) {
            //display all the completed tags
            for(ArrayList<Point> tag : imagePanel.tagsList) {
                imagePanel.drawTag(tag);
                imagePanel.finishTag(tag);
                if (tag == selectedTag) {
                    imagePanel.drawThickTag(selectedTag);
                    imagePanel.finishThickTag(selectedTag);
                }
            }
            //display current tag
            if(imagePanel.currentTag == selectedTag) {
                imagePanel.drawThickTag(imagePanel.currentTag);
            }
            else {
                imagePanel.drawTag(imagePanel.currentTag);
            }
        }
    }
   
    public void nameTag() {
        String input;
        input = JOptionPane.showInputDialog(mainPanel, "Insert tag name : ", "Tag name", 1);
        if ("".equals(input) || input == null) {
            input = "Tag " + (tagNameList.size() + 1);
        }
        tagNameList.add(input);
        listModel.addElement(input);
        
        super.repaint();
    }
    
    public void save() {
        ObjectOutputStream out = null;
        try {
            out = new ObjectOutputStream(new FileOutputStream(imageFile + "-iTags.ser"));
            out.writeObject(imagePanel.tagsList);
            out.writeObject(tagNameList);
            out.flush();
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
	
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Object[] options = {"Yes","No"};
        selectedIndex = tagListBox.getSelectedIndex();
        if(selectedIndex == -1) {
            super.repaint();
            return;
        }
        int n = JOptionPane.showOptionDialog(mainPanel,"Are you sure you want to delete the tag " + tagNameList.get(selectedIndex)+ "?","Deleting a tag...",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        if (n == JOptionPane.YES_OPTION) {
            tagNameList.remove(selectedIndex);
            listModel.remove(selectedIndex);
            imagePanel.tagsList.remove(selectedIndex);
            super.repaint();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (imagePanel != null) {
            Object[] options = {"Yes","No","Cancel"};
            int n = JOptionPane.showOptionDialog(mainPanel,"Do you want to save changes to this image before exiting?","Exiting...",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            if (n == JOptionPane.YES_OPTION) {
                save();
                System.exit(0);
            }
            else if (n == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        }
        else {
            Object[] options = {"Yes","No"};
            int n = JOptionPane.showOptionDialog(mainPanel,"Are you sure you want to exit?","Exiting...",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            if (n == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed
   
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int returnVal = fileChooser.showOpenDialog(GUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (imagePanel != null) {
                Object[] options = {"Yes","No","Cancel"};
                int n = JOptionPane.showOptionDialog(mainPanel,"Before changing image, do you want to save changes to the current image before exiting?","Changing image...",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                if (n == JOptionPane.YES_OPTION) {
                    save();
                }
                mainPanel.remove(imagePanel);
                mainPanel.repaint();
                imagePanel.repaint();
                listModel.clear();
                colorComboBox.setSelectedIndex(0);
            }
            
            imageFile = fileChooser.getSelectedFile();            
            File tagsFile = new File(imageFile.getPath() + "-iTags.ser");            
            try {
                welcomeLabel.setVisible(false);
                imagePanel = new Panel(imageFile);
                mainPanel.add(imagePanel);
                Graphics g = imagePanel.getGraphics();
                imagePanel.showImage(g);

                //Deserialize the array
                if (tagsFile.exists()) {
                    ObjectInputStream in = new ObjectInputStream(new FileInputStream(imageFile + "-iTags.ser"));
                    imagePanel.tagsList = (ArrayList<ArrayList<Point>>) in.readObject();
                    tagNameList = (ArrayList<String>) in.readObject();
                    
                    in.close();
                    
                    int l = imagePanel.tagsList.size();
                    ArrayList<Point> j;
                    for(int i=0; i<l; i++) {
                        j = imagePanel.tagsList.get(i);
                        imagePanel.drawTag(j);
                        imagePanel.finishTag(j);
                    }

                    String k;
                    for(int i=0; i<tagNameList.size(); i++) {
                        k = tagNameList.get(i);
                        listModel.addElement(k);
                    }
                }
                super.repaint();
            } catch (Exception ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        imagePanel.finishTag(imagePanel.currentTag);
        nameTag();
        imagePanel.addNewTag();
    }//GEN-LAST:event_finishButtonActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        save();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        mainPanel.remove(imagePanel);
        mainPanel.repaint();
        imagePanel.repaint();
        listModel.clear();
        welcomeLabel.setVisible(true);
        imagePanel = null;
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        imagePanel.currentTag.remove(imagePanel.currentTag.size() - 1);
        Graphics g = imagePanel.getGraphics();
        super.repaint();
    }//GEN-LAST:event_undoButtonActionPerformed

    private void tagListBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tagListBoxFocusGained
        selectedIndex = tagListBox.getSelectedIndex();
        if(selectedIndex == -1) {
            super.repaint();
            return;
        }
        selectedTag = imagePanel.tagsList.get(selectedIndex);
        super.repaint();
    }//GEN-LAST:event_tagListBoxFocusGained

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        About about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public Color castStringToColor(String s) {
        if (s == "Red") {
            return Color.RED;
        }
        else if (s == "Blue") {
            return Color.BLUE;
        }
        else if (s == "Yellow"){
            return Color.YELLOW;
        }
        else {
            return Color.GREEN;
        }
    }
    
    private void colorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorComboBoxActionPerformed
        /*selectedIndex = tagListBox.getSelectedIndex();
        if(selectedIndex == -1) {
            super.repaint();
            return;
        }*/
        focussedColor = (String)colorComboBox.getSelectedItem();
        imagePanel.defaultColor = castStringToColor(focussedColor);
        super.repaint();
    }//GEN-LAST:event_colorComboBoxActionPerformed

    private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameButtonActionPerformed
        selectedIndex = tagListBox.getSelectedIndex();
        if(selectedIndex == -1) {
            super.repaint();
            return;
        }
        String input;
        input = JOptionPane.showInputDialog(mainPanel, "Insert tag name : ", "Tag name", 1);
        if ("".equals(input)) {
            input = tagNameList.get(selectedIndex);
        }
        tagNameList.set(selectedIndex, input);
        listModel.clear();
        String k;
        for(int i=0; i<tagNameList.size(); i++) {
            k = tagNameList.get(i);
            listModel.addElement(k);
        }
        super.repaint();
    }//GEN-LAST:event_renameButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (imagePanel != null) {
            Object[] options = {"Yes","No","Cancel"};
            int n = JOptionPane.showOptionDialog(mainPanel,"Do you want to save changes to this image before exiting?","Exiting...",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            if (n == JOptionPane.YES_OPTION) {
                save();
                System.exit(0);
            }
            else if (n == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        }
        else {
            Object[] options = {"Yes","No"};
            int n = JOptionPane.showOptionDialog(mainPanel,"Are you sure you want to exit?","Exiting...",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            if (n == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void tagListBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tagListBoxFocusLost
        selectedIndex = tagListBox.getSelectedIndex();
        if(selectedIndex == -1) {
            super.repaint();
            return;
        }
        selectedTag = imagePanel.tagsList.get(selectedIndex);
        super.repaint();
    }//GEN-LAST:event_tagListBoxFocusLost

    private void tagListBoxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagListBoxMouseExited

    }//GEN-LAST:event_tagListBoxMouseExited

    private void tagListBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagListBoxMouseEntered

    }//GEN-LAST:event_tagListBoxMouseEntered

    private void tagListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tagListBoxValueChanged
        
        super.repaint();
    }//GEN-LAST:event_tagListBoxValueChanged

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        Help help = new Help();
        help.setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JComboBox colorComboBox;
    private javax.swing.JLabel colorComboBoxLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton finishButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    public javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton renameButton;
    public javax.swing.JMenuItem saveMenuItem;
    public javax.swing.JList tagListBox;
    private javax.swing.JLabel tagListLabel;
    private javax.swing.JButton undoButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
